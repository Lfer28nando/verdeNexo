<%- include('../partials/header') %>

<style>
/* Carrito de Compras - Verde Nexo */

/* Variables CSS */
:root {
    --primary-green: #28a745;
    --primary-green-dark: #218838;
    --primary-green-light: #20c997;
    --secondary-green: #4a7c59;
    --accent-green: #90EE90;
    --dark-green: #2f5233;
    --light-bg: #f8f9fa;
    --shadow: 0 4px 15px rgba(0,0,0,0.1);
    --shadow-hover: 0 8px 25px rgba(0,0,0,0.15);
    --border-radius: 12px;
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Layout Principal */
.cart-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
    padding: 2rem 0;
}

/* Header del Carrito */
.cart-header {
    background: linear-gradient(135deg, var(--dark-green) 0%, var(--secondary-green) 100%);
    color: white;
    padding: 3rem 0 2rem;
    position: relative;
    overflow: hidden;
}

.cart-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="10" cy="20" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="90" cy="80" r="1.5" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="40" r="0.8" fill="rgba(255,255,255,0.1)"/><circle cx="20" cy="70" r="1.2" fill="rgba(255,255,255,0.1)"/></svg>') repeat;
    opacity: 0.3;
}

.cart-title {
    font-size: 2.5rem;
    font-weight: 800;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    margin-bottom: 0.5rem;
}

.cart-subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
}

/* Contenedor Principal */
.cart-content {
    padding: 2rem 0;
}

/* Items del Carrito */
.cart-items {
    background: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    overflow: hidden;
    margin-bottom: 2rem;
}

.cart-item {
    display: flex;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #e9ecef;
    transition: var(--transition);
}

.cart-item:last-child {
    border-bottom: none;
}

.cart-item:hover {
    background: #f8f9fa;
}

.cart-item-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 1rem;
}

.cart-item-info {
    flex: 1;
    min-width: 0;
}

.cart-item-title {
    font-size: 1.1rem;
    font-weight: 700;
    color: #2c3e50;
    margin-bottom: 0.25rem;
    display: block;
}

.cart-item-description {
    color: #6c757d;
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    line-clamp: 2;
    overflow: hidden;
}

.cart-item-price {
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--primary-green);
}

/* Controles de Cantidad */
.quantity-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0.5rem 0;
}

.quantity-btn {
    width: 32px;
    height: 32px;
    border: 2px solid #e9ecef;
    background: white;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: var(--transition);
    color: #6c757d;
}

.quantity-btn:hover {
    border-color: var(--primary-green);
    color: var(--primary-green);
}

.quantity-input {
    width: 60px;
    text-align: center;
    border: 2px solid #e9ecef;
    border-radius: 6px;
    padding: 0.25rem;
    font-weight: 600;
}

.quantity-input:focus {
    border-color: var(--primary-green);
    outline: none;
}

/* Acciones del Item */
.cart-item-actions {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 0.5rem;
}

.remove-item {
    background: transparent;
    border: none;
    color: #dc3545;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: var(--transition);
}

.remove-item:hover {
    background: #f8d7da;
}

/* Resumen del Carrito */
.cart-summary {
    background: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    padding: 2rem;
    position: sticky;
    top: 20px;
}

.summary-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: #2c3e50;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #e9ecef;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
    font-size: 0.95rem;
}

.summary-row.total {
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--primary-green);
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 2px solid #e9ecef;
}

.summary-row.discount {
    color: #dc3545;
}

/* Cupón */
.coupon-section {
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid #e9ecef;
}

.coupon-input-group {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.coupon-input {
    flex: 1;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    font-size: 0.95rem;
}

.coupon-input:focus {
    border-color: var(--primary-green);
    outline: none;
}

.btn-apply-coupon {
    background: var(--primary-green);
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 600;
    transition: var(--transition);
}

.btn-apply-coupon:hover {
    background: var(--primary-green-dark);
    transform: translateY(-2px);
}

.coupon-applied {
    background: #d4edda;
    color: #155724;
    padding: 0.75rem;
    border-radius: 8px;
    font-size: 0.9rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.remove-coupon {
    background: none;
    border: none;
    color: #155724;
    cursor: pointer;
    padding: 0;
}

/* Envío */
.shipping-section {
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid #e9ecef;
}

.shipping-form {
    display: grid;
    gap: 1rem;
}

.shipping-input {
    width: 100%;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    font-size: 0.95rem;
}

.shipping-input:focus {
    border-color: var(--primary-green);
    outline: none;
}

.btn-calculate-shipping {
    background: var(--secondary-green);
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 600;
    transition: var(--transition);
}

.btn-calculate-shipping:hover {
    background: var(--dark-green);
    transform: translateY(-2px);
}

.shipping-result {
    background: #d1ecf1;
    color: #0c5460;
    padding: 1rem;
    border-radius: 8px;
    font-size: 0.9rem;
}

/* Botones de Acción */
.cart-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.btn-checkout {
    background: linear-gradient(135deg, var(--primary-green), var(--primary-green-light));
    border: none;
    color: white;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 700;
    transition: var(--transition);
    text-align: center;
}

.btn-checkout:hover {
    background: linear-gradient(135deg, var(--primary-green-dark), var(--primary-green));
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
}

.btn-continue-shopping {
    background: transparent;
    border: 2px solid var(--primary-green);
    color: var(--primary-green);
    padding: 1rem 2rem;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    transition: var(--transition);
    text-align: center;
}

.btn-continue-shopping:hover {
    background: var(--primary-green);
    color: white;
    transform: translateY(-2px);
}

/* Carrito Vacío */
.empty-cart {
    text-align: center;
    padding: 4rem 2rem;
    color: #6c757d;
}

.empty-cart i {
    font-size: 4rem;
    color: #dee2e6;
    margin-bottom: 1rem;
}

.empty-cart h3 {
    color: #2c3e50;
    margin-bottom: 1rem;
}

.empty-cart p {
    margin-bottom: 2rem;
}

/* Loading States */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
}

.loading-spinner {
    width: 50px;
    height: 50px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid var(--primary-green);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive */
@media (max-width: 768px) {
    .cart-title {
        font-size: 2rem;
    }

    .cart-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }

    .cart-item-image {
        align-self: center;
    }

    .cart-item-actions {
        flex-direction: row;
        align-items: center;
        width: 100%;
        justify-content: space-between;
    }

    .cart-summary {
        position: static;
        margin-top: 2rem;
    }

    .coupon-input-group {
        flex-direction: column;
    }

    .btn-apply-coupon {
        align-self: flex-start;
    }

    .cart-actions {
        flex-direction: column-reverse;
    }
}

@media (max-width: 576px) {
    .cart-container {
        padding: 1rem 0;
    }

    .cart-header {
        padding: 2rem 0 1.5rem;
    }

    .cart-title {
        font-size: 1.8rem;
    }

    .cart-content {
        padding: 1rem 0;
    }

    .cart-item {
        padding: 1rem;
    }

    .cart-item-image {
        width: 60px;
        height: 60px;
    }

    .summary-row {
        font-size: 0.9rem;
    }

    .summary-row.total {
        font-size: 1.1rem;
    }
}

/* Animaciones */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.cart-item {
    animation: fadeInUp 0.5s ease-out;
    animation-fill-mode: both;
}

.cart-item:nth-child(1) { animation-delay: 0.1s; }
.cart-item:nth-child(2) { animation-delay: 0.2s; }
.cart-item:nth-child(3) { animation-delay: 0.3s; }
.cart-item:nth-child(4) { animation-delay: 0.4s; }
.cart-item:nth-child(5) { animation-delay: 0.5s; }
</style>

<div class="cart-container">
    <!-- Header del Carrito -->
    <section class="cart-header">
        <div class="container">
            <div class="row justify-content-center text-center">
                <div class="col-lg-8">
                    <h1 class="cart-title">Mi Carrito de Compras</h1>
                    <p class="cart-subtitle">Revisa y administra los productos que deseas adquirir</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Contenido Principal -->
    <div class="container cart-content">
        <div class="row">
            <!-- Items del Carrito -->
            <div class="col-lg-8">
                <div id="cartItemsContainer" class="cart-items">
                    <!-- Items se cargan dinámicamente -->
                    <div class="loading-spinner" id="cartLoading"></div>
                </div>

                <!-- Carrito vacío -->
                <div id="emptyCart" class="empty-cart" style="display: none;">
                    <i class="fas fa-shopping-cart"></i>
                    <h3>Tu carrito está vacío</h3>
                    <p>¡Agrega algunos productos para comenzar tu compra!</p>
                    <a href="/catalogo" class="btn btn-success btn-lg">
                        <i class="fas fa-leaf me-2"></i>Explorar Catálogo
                    </a>
                </div>
            </div>

            <!-- Resumen del Carrito -->
            <div class="col-lg-4">
                <div class="cart-summary">
                    <h3 class="summary-title">Resumen del Pedido</h3>

                    <!-- Cupón -->
                    <div class="coupon-section">
                        <div class="coupon-input-group">
                            <input type="text" id="couponCode" class="coupon-input" placeholder="Código de descuento" maxlength="20">
                            <button id="applyCouponBtn" class="btn-apply-coupon">
                                <i class="fas fa-tag me-1"></i>Aplicar
                            </button>
                        </div>
                        <div id="couponApplied" class="coupon-applied" style="display: none;">
                            <span id="couponText"></span>
                            <button id="removeCouponBtn" class="remove-coupon">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Envío -->
                    <div class="shipping-section">
                        <h5 class="mb-3">Calcular Envío</h5>
                        <div class="shipping-form">
                            <input type="text" id="shippingUPZ" class="shipping-input" placeholder="UPZ (ej: Chapinero)" maxlength="50">
                            <input type="text" id="shippingBarrio" class="shipping-input" placeholder="Barrio (ej: Zona Rosa)" maxlength="50">
                            <button id="calculateShippingBtn" class="btn-calculate-shipping">
                                <i class="fas fa-truck me-1"></i>Calcular
                            </button>
                        </div>
                        <div id="shippingResult" class="shipping-result" style="display: none;">
                            <div id="shippingInfo"></div>
                        </div>
                    </div>

                    <!-- Totales -->
                    <div id="cartTotals">
                        <div class="summary-row">
                            <span>Subtotal:</span>
                            <span id="subtotalAmount">$0</span>
                        </div>
                        <div class="summary-row discount" id="discountRow" style="display: none;">
                            <span>Descuento:</span>
                            <span id="discountAmount">-$0</span>
                        </div>
                        <div class="summary-row">
                            <span>Envío:</span>
                            <span id="shippingAmount">$0</span>
                        </div>
                        <div class="summary-row total">
                            <span>Total:</span>
                            <span id="totalAmount">$0</span>
                        </div>
                    </div>

                    <!-- Acciones -->
                    <div class="cart-actions">
                        <button id="checkoutBtn" class="btn-checkout" disabled>
                            <i class="fas fa-credit-card me-2"></i>Proceder al Pago
                        </button>
                        <button id="continueShoppingBtn" class="btn-continue-shopping">
                            <i class="fas fa-arrow-left me-2"></i>Continuar Comprando
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Overlay de carga -->
<div id="loadingOverlay" class="loading-overlay" style="display: none;">
    <div class="loading-spinner"></div>
</div>

<script>
// Configuración de la API
const API_BASE = 'http://localhost:3000';
const API = axios.create({
    baseURL: API_BASE,
    withCredentials: true,
    headers: { 'Content-Type': 'application/json' }
});

// Estado del carrito
let cartData = null;
let sessionId = null;

// Inicializar carrito
document.addEventListener('DOMContentLoaded', function() {
    initializeCart();
});

// Inicializar carrito
async function initializeCart() {
    try {
        // Generar o obtener sessionId
        sessionId = getOrCreateSessionId();

        // Cargar carrito
        await loadCart();

        // Configurar event listeners
        setupEventListeners();

    } catch (error) {
        console.error('Error initializing cart:', error);
        showError('Error al cargar el carrito');
    }
}

// Obtener o crear sessionId
function getOrCreateSessionId() {
    let sessionId = localStorage.getItem('cartSessionId');
    if (!sessionId) {
        sessionId = 'cart_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('cartSessionId', sessionId);
    }
    return sessionId;
}

// Cargar carrito desde API
async function loadCart() {
    showLoading(true);

    try {
        const response = await API.get(`/api/cart/${sessionId}`);

        if (response.data.success) {
            cartData = response.data.data;
            renderCart();
            updateCartSummary();
        } else {
            throw new Error(response.data.message || 'Error al cargar carrito');
        }

    } catch (error) {
        console.error('Error loading cart:', error);

        // Si es error 404, crear carrito vacío
        if (error.response?.status === 404) {
            cartData = {
                items: [],
                cupones: [],
                envio: {},
                totales: { subtotal: 0, descuentoCupones: 0, costoEnvio: 0, total: 0 }
            };
            renderCart();
            updateCartSummary();
        } else {
            showError('Error al cargar el carrito');
        }
    } finally {
        showLoading(false);
    }
}

// Renderizar items del carrito
function renderCart() {
    const container = document.getElementById('cartItemsContainer');
    const emptyCart = document.getElementById('emptyCart');

    if (!cartData || !cartData.items || cartData.items.length === 0) {
        container.style.display = 'none';
        emptyCart.style.display = 'block';
        return;
    }

    container.style.display = 'block';
    emptyCart.style.display = 'none';

    container.innerHTML = cartData.items.map((item, index) => createCartItemHTML(item, index)).join('');
}

// Crear HTML para un item del carrito
function createCartItemHTML(item, index) {
    const imageUrl = item.productoId?.imagenes && item.productoId.imagenes.length > 0
        ? `${API_BASE}/uploads/imagenes/${item.productoId.imagenes[0]}`
        : 'https://via.placeholder.com/80x80?text=Sin+Imagen';

    const itemTotal = item.precioUnitario * item.cantidad;

    return `
        <div class="cart-item" data-item-id="${item._id}" data-product-id="${item.productoId._id}">
            <img src="${imageUrl}" alt="${item.productoId.nombre}" class="cart-item-image" loading="lazy">

            <div class="cart-item-info">
                <a href="/producto/${item.productoId._id}" class="cart-item-title">
                    ${item.productoId.nombre}
                </a>
                <div class="cart-item-description">
                    ${item.productoId.descripcion || 'Sin descripción'}
                </div>
                <div class="cart-item-price">$${item.precioUnitario.toFixed(2)} c/u</div>

                <div class="quantity-controls">
                    <button class="quantity-btn" onclick="changeQuantity('${item._id}', -1)">
                        <i class="fas fa-minus"></i>
                    </button>
                    <input type="number" class="quantity-input" value="${item.cantidad}"
                           min="1" max="50" onchange="updateQuantity('${item._id}', this.value)">
                    <button class="quantity-btn" onclick="changeQuantity('${item._id}', 1)">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
            </div>

            <div class="cart-item-actions">
                <div class="cart-item-price">$${itemTotal.toFixed(2)}</div>
                <button class="remove-item" onclick="removeItem('${item._id}')" title="Eliminar producto">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `;
}

// Actualizar resumen del carrito
function updateCartSummary() {
    if (!cartData) return;

    // Subtotal
    document.getElementById('subtotalAmount').textContent = `$${cartData.totales.subtotal.toFixed(2)}`;

    // Descuento
    const discountRow = document.getElementById('discountRow');
    const discountAmount = document.getElementById('discountAmount');
    if (cartData.totales.descuentoCupones > 0) {
        discountRow.style.display = 'flex';
        discountAmount.textContent = `-$${cartData.totales.descuentoCupones.toFixed(2)}`;
    } else {
        discountRow.style.display = 'none';
    }

    // Envío
    document.getElementById('shippingAmount').textContent =
        cartData.totales.costoEnvio > 0 ? `$${cartData.totales.costoEnvio.toFixed(2)}` : 'Gratis';

    // Total
    document.getElementById('totalAmount').textContent = `$${cartData.totales.total.toFixed(2)}`;

    // Cupón aplicado
    updateCouponDisplay();

    // Botón de checkout
    const checkoutBtn = document.getElementById('checkoutBtn');
    checkoutBtn.disabled = !cartData.items || cartData.items.length === 0;
}

// Actualizar display de cupón
function updateCouponDisplay() {
    const couponApplied = document.getElementById('couponApplied');
    const couponText = document.getElementById('couponText');
    const couponInput = document.getElementById('couponCode');

    if (cartData.cupones && cartData.cupones.length > 0) {
        const cupon = cartData.cupones[0]; // Solo mostrar el primero
        couponText.textContent = `${cupon.descripcion} (-$${cupon.descuentoAplicado.toFixed(2)})`;
        couponApplied.style.display = 'flex';
        couponInput.value = cupon.codigo;
        couponInput.disabled = true;
        document.getElementById('applyCouponBtn').style.display = 'none';
    } else {
        couponApplied.style.display = 'none';
        couponInput.value = '';
        couponInput.disabled = false;
        document.getElementById('applyCouponBtn').style.display = 'inline-block';
    }
}

// Configurar event listeners
function setupEventListeners() {
    // Aplicar cupón
    document.getElementById('applyCouponBtn').addEventListener('click', applyCoupon);

    // Remover cupón
    document.getElementById('removeCouponBtn').addEventListener('click', removeCoupon);

    // Calcular envío
    document.getElementById('calculateShippingBtn').addEventListener('click', calculateShipping);

    // Continuar comprando
    document.getElementById('continueShoppingBtn').addEventListener('click', () => {
        window.location.href = '/catalogo';
    });

    // Proceder al pago
    document.getElementById('checkoutBtn').addEventListener('click', proceedToCheckout);
}

// Cambiar cantidad (+1 o -1)
async function changeQuantity(itemId, delta) {
    const item = cartData.items.find(item => item._id === itemId);
    if (!item) return;

    const newQuantity = Math.max(1, Math.min(50, item.cantidad + delta));
    if (newQuantity === item.cantidad) return;

    await updateQuantity(itemId, newQuantity);
}

// Actualizar cantidad específica
async function updateQuantity(itemId, newQuantity) {
    const quantity = parseInt(newQuantity);
    if (isNaN(quantity) || quantity < 1 || quantity > 50) {
        showToast('Cantidad inválida. Debe ser entre 1 y 50.', 'warning');
        // Restaurar valor anterior
        const item = cartData.items.find(item => item._id === itemId);
        if (item) {
            event.target.value = item.cantidad;
        }
        return;
    }

    showLoading(true);

    try {
        const response = await API.put(`/api/cart/item/${sessionId}/${itemId}`, { cantidad: quantity });

        if (response.data.success) {
            cartData = response.data.data;
            renderCart();
            updateCartSummary();
            showToast('Cantidad actualizada', 'success');
        } else {
            throw new Error(response.data.message);
        }

    } catch (error) {
        console.error('Error updating quantity:', error);
        showToast('Error al actualizar cantidad', 'error');

        // Restaurar valor anterior
        const item = cartData.items.find(item => item._id === itemId);
        if (item) {
            event.target.value = item.cantidad;
        }
    } finally {
        showLoading(false);
    }
}

// Eliminar item del carrito
async function removeItem(itemId) {
    if (!confirm('¿Estás seguro de que deseas eliminar este producto del carrito?')) {
        return;
    }

    showLoading(true);

    try {
        const response = await API.delete(`/api/cart/item/${sessionId}/${itemId}`);

        if (response.data.success) {
            cartData = response.data.data;
            renderCart();
            updateCartSummary();
            showToast('Producto eliminado del carrito', 'success');
        } else {
            throw new Error(response.data.message);
        }

    } catch (error) {
        console.error('Error removing item:', error);
        showToast('Error al eliminar producto', 'error');
    } finally {
        showLoading(false);
    }
}

// Aplicar cupón
async function applyCoupon() {
    const couponCode = document.getElementById('couponCode').value.trim().toUpperCase();

    if (!couponCode) {
        showToast('Ingresa un código de cupón', 'warning');
        return;
    }

    showLoading(true);

    try {
        const response = await API.post('/api/cart/coupon', {
            sessionId,
            codigo: couponCode
        });

        if (response.data.success) {
            cartData = response.data.data;
            updateCartSummary();
            showToast(`Cupón aplicado: ${response.data.descuentoAplicado ? '$' + response.data.descuentoAplicado.toFixed(2) + ' de descuento' : 'Cupón aplicado'}`, 'success');
        } else {
            throw new Error(response.data.message);
        }

    } catch (error) {
        console.error('Error applying coupon:', error);
        const message = error.response?.data?.message || 'Error al aplicar cupón';
        showToast(message, 'error');
    } finally {
        showLoading(false);
    }
}

// Remover cupón
async function removeCoupon() {
    const couponCode = cartData.cupones[0]?.codigo;
    if (!couponCode) return;

    showLoading(true);

    try {
        const response = await API.delete(`/api/cart/coupon/${sessionId}/${couponCode}`);

        if (response.data.success) {
            cartData = response.data.data;
            updateCartSummary();
            showToast('Cupón removido', 'success');
        } else {
            throw new Error(response.data.message);
        }

    } catch (error) {
        console.error('Error removing coupon:', error);
        showToast('Error al remover cupón', 'error');
    } finally {
        showLoading(false);
    }
}

// Calcular envío
async function calculateShipping() {
    const upz = document.getElementById('shippingUPZ').value.trim();
    const barrio = document.getElementById('shippingBarrio').value.trim();

    if (!upz || !barrio) {
        showToast('Ingresa la UPZ y barrio para calcular el envío', 'warning');
        return;
    }

    showLoading(true);

    try {
        const response = await API.post('/api/cart/shipping', {
            sessionId,
            upz,
            barrio,
            direccion: { barrio }
        });

        if (response.data.success) {
            cartData = response.data.data.carrito;
            updateCartSummary();

            // Mostrar resultado del envío
            const shippingResult = document.getElementById('shippingResult');
            const shippingInfo = document.getElementById('shippingInfo');

            const envio = response.data.data.envio;
            shippingInfo.innerHTML = `
                <strong>Zona:</strong> ${envio.zona}<br>
                <strong>Costo:</strong> $${envio.costo.toFixed(2)}<br>
                <strong>Tiempo de entrega:</strong> ${envio.tiempoEntrega}
            `;

            shippingResult.style.display = 'block';
            showToast('Envío calculado exitosamente', 'success');
        } else {
            throw new Error(response.data.message);
        }

    } catch (error) {
        console.error('Error calculating shipping:', error);
        const message = error.response?.data?.message || 'Error al calcular envío';
        showToast(message, 'error');
    } finally {
        showLoading(false);
    }
}

// Proceder al checkout
function proceedToCheckout() {
    if (!cartData || !cartData.items || cartData.items.length === 0) {
        showToast('Tu carrito está vacío', 'warning');
        return;
    }

    // Redirigir al checkout
    window.location.href = '/checkout';
}

// Utilidades
function showLoading(show) {
    document.getElementById('loadingOverlay').style.display = show ? 'flex' : 'none';
}

function showToast(message, type = 'info') {
    // Crear contenedor de toasts si no existe
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
        toastContainer.style.zIndex = '9999';
        document.body.appendChild(toastContainer);
    }

    // Crear toast
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute('role', 'alert');
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;

    toastContainer.appendChild(toast);

    // Mostrar toast
    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();

    // Limpiar después de ocultar
    toast.addEventListener('hidden.bs.toast', () => {
        toast.remove();
    });
}

function showError(message) {
    const container = document.getElementById('cartItemsContainer');
    container.innerHTML = `
        <div class="empty-cart">
            <i class="fas fa-exclamation-triangle"></i>
            <h4>Error al cargar el carrito</h4>
            <p>${message}</p>
            <button class="btn btn-success" onclick="location.reload()">Reintentar</button>
        </div>
    `;
}
</script>

<%- include('../partials/footer') %></content>
<parameter name="filePath">c:\Users\Usuario\verdeNexo-develop\verdeNexo-develop\frontend\src\views\pages\carrito.ejs