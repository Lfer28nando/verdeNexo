<%- include('../partials/header') %>
<script type="module" src="/js/api.functions.js"></script>

<!-- SDK de Mercado Pago -->
<script src="https://sdk.mercadopago.com/js/v2"></script>

<style>
/* Checkout - Verde Nexo */

/* Variables CSS */
:root {
    --primary-green: #28a745;
    --primary-green-dark: #218838;
    --primary-green-light: #20c997;
    --secondary-green: #4a7c59;
    --accent-green: #90EE90;
    --dark-green: #2f5233;
    --light-bg: #f8f9fa;
    --shadow: 0 4px 15px rgba(0,0,0,0.1);
    --shadow-hover: 0 8px 25px rgba(0,0,0,0.15);
    --border-radius: 12px;
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Layout Principal */
.checkout-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
    padding: 2rem 0;
}

/* Header del Checkout */
.checkout-header {
    background: linear-gradient(135deg, var(--dark-green) 0%, var(--secondary-green) 100%);
    color: white;
    padding: 3rem 0 2rem;
    position: relative;
    overflow: hidden;
}

.checkout-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="10" cy="20" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="90" cy="80" r="1.5" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="40" r="0.8" fill="rgba(255,255,255,0.1)"/><circle cx="20" cy="70" r="1.2" fill="rgba(255,255,255,0.1)"/></svg>') repeat;
    opacity: 0.3;
}

.checkout-title {
    font-size: 2.5rem;
    font-weight: 800;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    margin-bottom: 0.5rem;
}

.checkout-subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
}

/* Contenedor Principal */
.checkout-content {
    padding: 2rem 0;
}

/* Formulario de Checkout */
.checkout-form {
    background: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    padding: 2rem;
    margin-bottom: 2rem;
}

.form-section {
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid #e9ecef;
}

.form-section:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
}

.section-title {
    font-size: 1.3rem;
    font-weight: 700;
    color: #2c3e50;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.checkout-input {
    width: 100%;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    font-size: 0.95rem;
    margin-bottom: 1rem;
    transition: var(--transition);
}

.checkout-input:focus {
    border-color: var(--primary-green);
    outline: none;
    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
}

.checkout-select {
    width: 100%;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    font-size: 0.95rem;
    margin-bottom: 1rem;
    background: white;
    transition: var(--transition);
}

.checkout-select:focus {
    border-color: var(--primary-green);
    outline: none;
    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
}

.input-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
}

.input-row .checkout-input,
.input-row .checkout-select {
    margin-bottom: 0;
}

/* Resumen del Pedido */
.order-summary {
    background: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    padding: 2rem;
    position: sticky;
    top: 20px;
}

.summary-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: #2c3e50;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #e9ecef;
}

.summary-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
    font-size: 0.95rem;
}

.summary-item.total {
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--primary-green);
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 2px solid #e9ecef;
}

/* Métodos de Pago */
.payment-methods {
    margin-bottom: 2rem;
}

.payment-method {
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 0.5rem;
    cursor: pointer;
    transition: var(--transition);
    display: flex;
    align-items: center;
    gap: 1rem;
}

.payment-method:hover,
.payment-method.selected {
    border-color: var(--primary-green);
    background: #f8f9fa;
}

.payment-radio {
    width: 18px;
    height: 18px;
    accent-color: var(--primary-green);
}

/* Botones de Acción */
.checkout-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: 2rem;
}

.btn-place-order {
    background: linear-gradient(135deg, var(--primary-green), var(--primary-green-light));
    border: none;
    color: white;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 700;
    transition: var(--transition);
    text-align: center;
}

.btn-place-order:hover {
    background: linear-gradient(135deg, var(--primary-green-dark), var(--primary-green));
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
}

.btn-place-order:disabled {
    background: #6c757d;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.btn-back-to-cart {
    background: transparent;
    border: 2px solid var(--primary-green);
    color: var(--primary-green);
    padding: 1rem 2rem;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    transition: var(--transition);
    text-align: center;
}

.btn-back-to-cart:hover {
    background: var(--primary-green);
    color: white;
    transform: translateY(-2px);
}

/* Loading States */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
}

.loading-spinner {
    width: 50px;
    height: 50px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid var(--primary-green);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive */
@media (max-width: 768px) {
    .checkout-title {
        font-size: 2rem;
    }

    .checkout-form,
    .order-summary {
        margin-bottom: 2rem;
    }

    .input-row {
        grid-template-columns: 1fr;
        gap: 0;
    }

    .checkout-actions {
        flex-direction: column-reverse;
    }

    .order-summary {
        position: static;
    }
}

@media (max-width: 576px) {
    .checkout-container {
        padding: 1rem 0;
    }

    .checkout-header {
        padding: 2rem 0 1.5rem;
    }

    .checkout-title {
        font-size: 1.8rem;
    }

    .checkout-content {
        padding: 1rem 0;
    }

    .checkout-form,
    .order-summary {
        padding: 1.5rem;
    }
}

/* Animaciones */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.checkout-form,
.order-summary {
    animation: fadeInUp 0.6s ease-out;
}
</style>

<div class="checkout-container">
    <!-- Header del Checkout -->
    <section class="checkout-header">
        <div class="container">
            <div class="row justify-content-center text-center">
                <div class="col-lg-8">
                    <h1 class="checkout-title">Finalizar Compra</h1>
                    <p class="checkout-subtitle">Completa tu información para procesar el pedido</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Contenido Principal -->
    <div class="container checkout-content">
        <div class="row">
            <!-- Formulario de Checkout -->
            <div class="col-lg-8">
                <form id="checkoutForm" class="checkout-form">
                    <!-- Información de Contacto -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-user"></i> Información de Contacto
                        </h3>
                        <div class="input-group mb-3">
                            <input type="email" id="email" class="checkout-input form-control" placeholder="Correo electrónico" required>
                            <button id="clearEmailBtn" type="button" class="btn btn-outline-danger" style="font-size:1rem;padding:0 0.5rem;">&times;</button>
                        </div>
                        <div class="input-group mb-3">
                            <input type="tel" id="phone" class="checkout-input form-control" placeholder="Teléfono" required>
                            <button id="clearPhoneBtn" type="button" class="btn btn-outline-danger" style="font-size:1rem;padding:0 0.5rem;">&times;</button>
                        </div>
                    </div>

                    <!-- Información de Envío -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-truck"></i> Información de Envío
                        </h3>
                        <input type="text" id="firstName" class="checkout-input" placeholder="Nombre" required>
                        <input type="text" id="lastName" class="checkout-input" placeholder="Apellido" required>

                        <!-- Campos de envío (UPZ / Barrio) añadidos para prefill desde el carrito -->
                        <div class="input-row" style="margin-bottom:1rem;">
                            <input type="text" id="shippingUPZ" class="checkout-input" value="Medellín" readonly style="flex:1;margin-right:0.5rem;" />
                            <select id="shippingBarrio" class="checkout-select" style="flex:1;">
                                <option value="">Seleccionar Barrio</option>
                                <option value="El Poblado">El Poblado</option>
                                <option value="Laureles">Laureles</option>
                                <option value="Envigado">Envigado</option>
                                <option value="Belen">Belén</option>
                                <option value="Robledo">Robledo</option>
                                <option value="Castilla">Castilla</option>
                            </select>
                        </div>

                        <input type="text" id="address" class="checkout-input" placeholder="Dirección" required>
                        <input type="text" id="postalCode" class="checkout-input" placeholder="Código Postal (opcional)">
                    </div>

                    <!-- Notas del Pedido -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-sticky-note"></i> Notas del Pedido (Opcional)
                        </h3>
                        <textarea id="orderNotes" class="checkout-input" rows="3" placeholder="Instrucciones especiales para el envío..."></textarea>
                    </div>

                    <!-- Acciones -->
                    <div class="checkout-actions">
                        <button type="submit" id="placeOrderBtn" class="btn-place-order" disabled>
                            <i class="fas fa-credit-card me-2"></i>Pagar con Mercado Pago
                        </button>
                        <button type="button" id="backToCartBtn" class="btn-back-to-cart">
                            <i class="fas fa-arrow-left me-2"></i>Volver al Carrito
                        </button>
                    </div>
                </form>
            </div>

            <!-- Resumen del Pedido -->
            <div class="col-lg-4">
                <div class="order-summary">
                    <h3 class="summary-title">Resumen del Pedido</h3>

                    <div id="orderItems">
                        <!-- Items se cargan dinámicamente -->
                        <div class="text-center py-4">
                            <div class="loading-spinner"></div>
                            <p class="mt-2">Cargando pedido...</p>
                        </div>
                    </div>

                    <div id="orderTotals" class="mt-3">
                        <!-- Totales se cargan dinámicamente -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Overlay de carga -->
<div id="loadingOverlay" class="loading-overlay" style="display: none;">
    <div class="loading-spinner"></div>
</div>

<script>
// Configuración de la API
// Permite configurar la URL del backend por variable global window._env_.BACKEND_URL
const API_BASE = (window._env_ && window._env_.BACKEND_URL) ? window._env_.BACKEND_URL : 'https://verdenexo-backend.onrender.com';
const API = axios.create({
    baseURL: API_BASE,
    withCredentials: true,
    headers: { 'Content-Type': 'application/json' }
});

// Estado del checkout
let cartData = null;
let sessionId = null;

// Inicializar checkout
document.addEventListener('DOMContentLoaded', function() {
    initializeCheckout();
});

// Inicializar checkout
async function initializeCheckout() {
    try {
        // Obtener sessionId
        sessionId = localStorage.getItem('cartSessionId');
        if (!sessionId) {
            showToast('No hay productos en el carrito', 'warning');
            window.location.href = '/carrito';
            return;
        }

        // Cargar datos del carrito
        await loadCartData();

        // Configurar event listeners
        setupEventListeners();

    } catch (error) {
        console.error('Error initializing checkout:', error);
        showError('Error al cargar el checkout');
    }
}

// Cargar datos del carrito
async function loadCartData() {
    showLoading(true);

    try {
        const response = await API.get(`/api/cart/${sessionId}`);

            if (response.data.success) {
            cartData = response.data.data;
            console.log('checkout: cartData loaded', cartData);

            // Verificar que hay items en el carrito
            if (!cartData.items || cartData.items.length === 0) {
                showToast('Tu carrito está vacío', 'warning');
                window.location.href = '/carrito';
                return;
            }

            renderOrderSummary();
            updateOrderTotals();

            // Si el carrito ya tiene dirección de envío calculada, prefilar en el checkout
            try {
                const envio = cartData.envio || {};
                console.log('checkout: envio payload', envio);

                // Helpers para lectura/escritura segura del DOM (en caso de que algunos inputs hayan sido eliminados)
                const elValue = (id) => {
                    const el = document.getElementById(id);
                    return el ? (el.value || '').toString().trim() : '';
                };
                const elSetValue = (id, val) => {
                    const el = document.getElementById(id);
                    if (el) el.value = val;
                };

                // Buscar la dirección en múltiples posibles formatos (más robusto)
                let addressString = '';
                let foundFrom = null;

                // 1) Top-level handy fields
                const topCandidates = [envio.calle, envio.addressString, envio.direccion_text, envio.direccion_raw, envio.direccionTexto, envio.direccionExacta, envio.direccionCompleta];
                for (const c of topCandidates) {
                    if (typeof c === 'string' && c.trim()) {
                        addressString = c.trim();
                        foundFrom = 'envio.top:' + c;
                        break;
                    }
                }

                // 2) If envio.direccion is present (string or object)
                if (!addressString && envio.direccion) {
                    const d = envio.direccion;
                    if (typeof d === 'string' && d.trim()) {
                        addressString = d.trim();
                        foundFrom = 'envio.direccion:string';
                    } else if (typeof d === 'object' && d !== null) {
                        const candidate = d.calle || d.street || d.address || d.fullAddress || d.direccion || d.direccionExacta || d.direccionCompleta || '';
                        if (candidate && typeof candidate === 'string') {
                            addressString = candidate.trim();
                            foundFrom = 'envio.direccion.object.' + (d.calle ? 'calle' : d.street ? 'street' : d.address ? 'address' : 'other');
                        }
                        // secondary fields (escribir solo si el elemento existe)
                        if (d.ciudad || d.city) elSetValue('city', d.ciudad || d.city);
                        if (d.departamento || d.department) elSetValue('department', d.departamento || d.department);
                        if (d.postalCode || d.codigoPostal) elSetValue('postalCode', d.postalCode || d.codigoPostal);
                    }
                }

                // 3) Other fields on envio
                if (!addressString) {
                    const other = envio.direccionExacta || envio.address || envio.street || envio.fullAddress || '';
                    if (other && typeof other === 'string') {
                        addressString = other.trim();
                        foundFrom = 'envio.other';
                    }
                }

                if (addressString) {
                    elSetValue('address', addressString);
                    console.log('checkout: dirección prefilleada desde', foundFrom || 'unknown');
                } else {
                    console.info('checkout: no se encontró dirección exacta en cartData.envio');
                }
            } catch (prefillErr) {
                console.warn('No se pudo prefilar dirección desde carrito:', prefillErr);
            }

            // Prefilar UPZ y Barrio si vienen en cartData.envio
            try {
                if (cartData.envio) {
                    const upzVal = cartData.envio.upz || cartData.envio.UPZ || cartData.envio.zone || '';
                    const barrioVal = cartData.envio.barrio || cartData.envio.neighborhood || '';

                    const shippingUPZ = document.getElementById('shippingUPZ');
                    const shippingBarrio = document.getElementById('shippingBarrio');

                    if (shippingUPZ && upzVal) {
                        shippingUPZ.value = upzVal;
                    }

                    if (shippingBarrio && barrioVal) {
                        // Si el select no tiene la opción, agregarla
                        let exists = Array.from(shippingBarrio.options).some(o => o.value === barrioVal || o.text === barrioVal);
                        if (!exists) {
                            const opt = document.createElement('option');
                            opt.value = barrioVal;
                            opt.text = barrioVal;
                            shippingBarrio.appendChild(opt);
                        }
                        shippingBarrio.value = barrioVal;
                    }
                }
            } catch (prefillErr2) {
                console.warn('No se pudo prefilar UPZ/Barrio desde carrito:', prefillErr2);
            }

            // Habilitar botón de pedido
            document.getElementById('placeOrderBtn').disabled = false;

        } else {
            throw new Error(response.data.message || 'Error al cargar carrito');
        }

    } catch (error) {
        console.error('Error loading cart data:', error);
        if (error.response?.status === 404) {
            showToast('Carrito no encontrado', 'warning');
            window.location.href = '/carrito';
        } else {
            showError('Error al cargar los datos del carrito');
        }
    } finally {
        showLoading(false);
    }
}

// Renderizar resumen del pedido
function renderOrderSummary() {
    const container = document.getElementById('orderItems');

    if (!cartData || !cartData.items) return;

    container.innerHTML = cartData.items.map(item => `
        <div class="summary-item">
            <div>
                <strong>${item.productoId.nombre}</strong>
                <br>
                <small class="text-muted">Cantidad: ${item.cantidad}</small>
            </div>
            <div>$${(item.precioUnitario * item.cantidad).toFixed(2)}</div>
        </div>
    `).join('');
}

// Actualizar totales del pedido
function updateOrderTotals() {
    const container = document.getElementById('orderTotals');

    if (!cartData) return;

    container.innerHTML = `
        <div class="summary-item">
            <span>Subtotal:</span>
            <span>$${cartData.totales.subtotal.toFixed(2)}</span>
        </div>
        ${cartData.totales.descuentoCupones > 0 ? `
        <div class="summary-item">
            <span>Descuento:</span>
            <span>-$${cartData.totales.descuentoCupones.toFixed(2)}</span>
        </div>
        ` : ''}
        <div class="summary-item">
            <span>Envío:</span>
            <span>${cartData.totales.costoEnvio > 0 ? '$' + cartData.totales.costoEnvio.toFixed(2) : 'Gratis'}</span>
        </div>
        <div class="summary-item total">
            <span>Total:</span>
            <span>$${cartData.totales.total.toFixed(2)}</span>
        </div>
    `;
}

// Configurar event listeners
function setupEventListeners() {
    // Formulario de checkout
    document.getElementById('checkoutForm').addEventListener('submit', handlePlaceOrder);

    // Botón volver al carrito
    document.getElementById('backToCartBtn').addEventListener('click', (e) => {
        e.preventDefault();
        window.location.href = '/carrito';
    });
}

// Manejar envío del pedido
async function handlePlaceOrder(event) {
    event.preventDefault();
    console.log('handlePlaceOrder: Iniciando proceso de pago');

    // Validar formulario
    const formData = getFormData();
    console.log('handlePlaceOrder: Datos del formulario:', formData);
    if (!validateForm(formData)) {
        console.log('handlePlaceOrder: Validación fallida');
        return;
    }
    console.log('handlePlaceOrder: Validación exitosa');

    // Deshabilitar botón
    const submitBtn = document.getElementById('placeOrderBtn');
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Procesando pago...';

    try {
        // Preparar datos para guardar checkout
        const checkoutData = {
            sessionId,
            facturacion: {
                tipoDocumento: 'cedula', // Corregido: usar 'cedula' en lugar de 'CC'
                numeroDocumento: '123456789', // Temporal, debería obtenerse del form
                nombreCompleto: `${formData.firstName} ${formData.lastName}`,
                email: formData.email,
                telefono: formData.phone
            },
            envio: {
                direccionEnvio: {
                    calle: formData.address,
                    numero: '', // Podría extraerse
                    barrio: document.getElementById('shippingBarrio')?.value || '',
                    ciudad: document.getElementById('shippingUPZ')?.value || 'Medellín',
                    departamento: 'Antioquia'
                },
                nombreDestinatario: `${formData.firstName} ${formData.lastName}`,
                telefonoDestinatario: formData.phone,
                costoEnvio: cartData.totales.costoEnvio || 0
            },
            pago: {
                metodoPago: 'mercadopago',
                montoTotal: cartData.totales.total
            }
        };
        console.log('handlePlaceOrder: Datos para guardar checkout:', checkoutData);

        // 1. Guardar datos del checkout (crear pedido en borrador)
        console.log('handlePlaceOrder: Enviando petición para guardar datos...');
        const saveResponse = await API.post('/api/checkout/guardar-datos', checkoutData);
        console.log('handlePlaceOrder: Respuesta guardar datos:', saveResponse);
        if (!saveResponse.data.success) {
            throw new Error('Error al guardar datos del checkout');
        }

        const pedidoId = saveResponse.data.data.pedidoId;
        console.log('handlePlaceOrder: Pedido creado en borrador:', pedidoId);

        // 2. Crear preferencia de pago
        console.log('handlePlaceOrder: Creando preferencia de pago...');
        const prefResponse = await API.post(`/api/checkout/crear-preferencia/${pedidoId}`);
        console.log('handlePlaceOrder: Respuesta crear preferencia:', prefResponse);
        if (!prefResponse.data.success) {
            throw new Error('Error al crear preferencia de pago');
        }

        const { initPoint } = prefResponse.data.data;
        console.log('handlePlaceOrder: Preferencia creada, initPoint:', initPoint);

        // 3. Redirigir al checkout de Mercado Pago
        console.log('handlePlaceOrder: Redirigiendo a:', initPoint);
        window.location.href = initPoint;

    } catch (error) {
        console.error('handlePlaceOrder: Error procesando pago:', error);
        showToast('Error al procesar el pago: ' + (error.response?.data?.message || error.message), 'error');

        // Rehabilitar botón
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
    }
}

// Obtener datos del formulario
function getFormData() {
    const g = id => {
        const el = document.getElementById(id);
        if (!el) return '';
        return (el.value || '').toString().trim();
    };
    return {
        email: g('email'),
        phone: g('phone'),
        firstName: g('firstName'),
        lastName: g('lastName'),
        address: g('address'),
        city: g('city'),
        department: g('department'),
        postalCode: g('postalCode'),
        orderNotes: g('orderNotes')
    };
}

// Validar formulario
function validateForm(data) {
    const errors = [];

    if (!data.email || !/\S+@\S+\.\S+/.test(data.email)) {
        errors.push('Correo electrónico inválido');
    }

    if (!data.phone) {
        errors.push('Teléfono es requerido');
    }

    if (!data.firstName || !data.lastName) {
        errors.push('Nombre y apellido son requeridos');
    }

    // Si la página no incluye city/department, no los requerimos
    const cityEl = document.getElementById('city');
    const deptEl = document.getElementById('department');
    if (!data.address || (cityEl && !data.city) || (deptEl && !data.department)) {
        errors.push('Dirección completa es requerida');
    }

    // No validar método de pago, será Mercado Pago

    if (errors.length > 0) {
        showToast('Por favor corrige los siguientes errores:\n' + errors.join('\n'), 'error');
        return false;
    }

    return true;
}

// Utilidades
function showLoading(show) {
    document.getElementById('loadingOverlay').style.display = show ? 'flex' : 'none';
}

function showToast(message, type = 'info') {
    // Crear contenedor de toasts si no existe
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
        toastContainer.style.zIndex = '9999';
        document.body.appendChild(toastContainer);
    }

    // Crear toast
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute('role', 'alert');
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;

    toastContainer.appendChild(toast);

    // Mostrar toast
    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();

    // Limpiar después de ocultar
    toast.addEventListener('hidden.bs.toast', () => {
        toast.remove();
    });
}

function showError(message) {
    const container = document.querySelector('.checkout-form');
    container.innerHTML = `
        <div class="text-center py-5">
            <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
            <h4>Error al cargar el checkout</h4>
            <p>${message}</p>
            <button class="btn btn-success" onclick="location.reload()">Reintentar</button>
        </div>
    `;
}
</script>

<script type="module" src="/js/checkout.js"></script>
<%- include('../partials/footer') %></content>
<parameter name="filePath">c:\Users\Usuario\verdeNexo-develop\verdeNexo-develop\frontend\src\views\pages\checkout.ejs